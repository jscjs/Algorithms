import tensorflow as tf  
import numpy as np  
  
# 模拟生成100对数据对, 对应的函数为y = x * 0.2 + 0.4  
x_data = np.random.rand(100).astype("float32")  
y_data = x_data * 0.2 + 0.4  
  
# 指定w和b变量的取值范围（利用TensorFlow来得到w和b的值）  
W = tf.Variable(tf.random_uniform([1], -1.0, 1.0)) #随机生成一个在[-1,1]范围的均匀分布数值  
b = tf.Variable(tf.zeros([1])) #set b=0  
y = W * x_data + b  
  
# 最小化均方误差  
loss = tf.reduce_mean(tf.square(y - y_data))  
optimizer = tf.train.GradientDescentOptimizer(0.5) #学习率为0.5的梯度下降法
train = optimizer.minimize(loss)  
  
# 初始化TensorFlow参数  
init = tf.initialize_all_variables()  
  
# 运行数据流图（  
sess = tf.Session()  
sess.run(init)  
  
# 观察多次迭代计算时，w和b的拟合值  
for step in range(201):  
    sess.run(train)  
    if step % 20 == 0:  
        print(step, sess.run(W), sess.run(b))  
